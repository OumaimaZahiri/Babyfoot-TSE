package application;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * 
 * @author Enguerran De Larocque Latour
 * This class is used to read the event file generated by FichierSynthese
 *
 */
public class ReadFile {
	/**
	 * This method read the file linked to the video loaded in the application and generate the event list
	 * @param p the path of the video loaded in the application
	 * @return events is the list of the events in the file
	 * @throws IOException
	 */
	public static ArrayList<int[]> getExistingEventFile(Path p) throws IOException {
		
		ArrayList<int[]> events = new ArrayList<int[]>();
		
		String nameWithExt = p.getFileName().toString();
		String fileName = "/Events_" + nameWithExt.substring(0, nameWithExt.length() - 4) + ".txt";
		String eventFile = p.getParent().toString() + "/FichiersSynthese" + fileName;
		System.out.println(eventFile);
		File f = new File(eventFile);
		
		Charset utf8 = StandardCharsets.UTF_8;
		
		if (f.exists()) {
			
			System.out.println("le fichier des evenements existe");
			FileReader eventFileReader = new FileReader(f, utf8);
			BufferedReader br = new BufferedReader(eventFileReader);
			String line;
			
			while((line = br.readLine()) != null) {
				System.out.println(line);
				int[] event = new int[2];
				convertLineToEvent(line, event);
				if (event[0] != -1) {
					System.out.println("[" + event[0] + ", " + event[1] + "]");
					events.add(event);
				}	
			}
			eventFileReader.close();
		}
		
		
		return events;
	}
	
	/**
	 * This method convert a string in an event, if the string start by MM:SS
	 * @param line the line of the file to test
	 * @param event the event array to fill
	 */
	private static void convertLineToEvent(String line, int[] event) {
		
		event[0] = -1;
		if (line.length() >= 5) {
			String time, eventS;
			String pattern = "^([0-5]\\d:[0-5]\\d)$";
			Pattern r = Pattern.compile(pattern);
			time = line.substring(0, 5);
			System.out.println(time);
			Matcher m = r.matcher(time);
			
			if (m.find()) {
				System.out.println("on a trouvé une ligne qui commence par un temps");
				
				eventS = line.substring(8);
				event[0] = convertTimeStringToInt(time);
				event[1] = convertEventStringToInt(eventS);
				
			}
		}
		
	}
	
	/**
	 * This method convert a string MM:SS into frame number for a 60 fps video
	 * @param time string formatted like MM:SS
	 * @return frame number
	 */
	private static int convertTimeStringToInt(String time) {
		
		String minS = time.substring(0, 2);
		String secS = time.substring(3);
		
		int total;
		int min = Integer.valueOf(minS);
		int sec = Integer.valueOf(secS);
		
		total = (min * 60 + sec + 1) * 60;
		
		return total;
	}
	
	/**
	 * This method return a number to the related string event.
	 * @param event string containing the event type
	 * @return event type number
	 */
	private static int convertEventStringToInt(String event) {
		
		int eventType = 7;
		
		if (event.contains("But de l'équipe droite")) {
			eventType = 1;
		}
		if (event.contains("But de l'équipe gauche")) {
			eventType = 2;
		}
		if (event.contains("Sortie de balle")) {
			eventType = 3;
		}
		if (event.contains("Gamelle de l'équipe droite")) {
			eventType = 4;
		}
		if (event.contains("Gamelle de l'équipe gauche")) {
			eventType = 5;
		}
		if (event.contains("But de l'équipe droite (cas douteux)")) {
			eventType = 6;
		}
		if (event.contains("But de l'équipe gauche (cas douteux)")) {
			eventType = 7;
		}
		
		return eventType;
	}
}
